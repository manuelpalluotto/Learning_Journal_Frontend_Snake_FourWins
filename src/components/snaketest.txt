'use client';
import '@/css/snake.css';
import { useEffect, useRef, useState } from 'react';

export default function Snake() {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const blocksize: number = 15;
    const canvasHeight: number = 50 * blocksize;
    const canvasWidth: number = 75 * blocksize;

    const snakeBody = useRef<{ x: number, y: number }[]>([{ x: 1 * blocksize, y: 1 * blocksize }]);
    const food = useRef<{ x: number, y: number }>({ x: 2 * blocksize, y: 2 * blocksize });
    const [score, setScore] = useState<number>(0);
    const [highScore, setHighScore] = useState<number>(0);
    const direction = useRef<string>('');
    const snakeHead = useRef<{ x: number, y: number }>({ x: snakeBody.current[0].x, y: snakeBody.current[0].y });

    const calcMovement = (event: KeyboardEvent) => {
        if (event.key === 'ArrowLeft' && direction.current !== 'right') {
            direction.current = 'left';
        }
        if (event.key === 'ArrowUp' && direction.current !== 'down') {
            direction.current = 'up';
        }
        if (event.key === 'ArrowRight' && direction.current !== 'left') {
            direction.current = 'right';
        }
        if (event.key === 'ArrowDown' && direction.current !== 'up') {
            direction.current = 'down';
        }
    };

    const move = () => {
        if (direction.current === 'left') {
            snakeHead.current.x -= blocksize;
        } else if (direction.current === 'right') {
            snakeHead.current.x += blocksize;
        } else if (direction.current === 'up') {
            snakeHead.current.y -= blocksize;
        } else if (direction.current === 'down') {
            snakeHead.current.y += blocksize;
        }
        eatFood();
    };

    const eatFood = () => {
        if (snakeHead.current.x === food.current.x && snakeHead.current.y === food.current.y) {
            snakeBody.current.push({ ...food.current });
            generateFood();
            setScore((prevScore) => prevScore + 1);
        }
    };

    const generateFood = () => {
        food.current.x = Math.floor(Math.random() * (canvasWidth / blocksize)) * blocksize;
        food.current.y = Math.floor(Math.random() * (canvasHeight / blocksize)) * blocksize;
    };

    const generateSnake = () => {
        snakeBody.current.length = 1;
        snakeBody.current[0].x = Math.floor(Math.random() * (canvasWidth / blocksize)) * blocksize;
        snakeBody.current[0].y = Math.floor(Math.random() * (canvasHeight / blocksize)) * blocksize;
        snakeHead.current = { ...snakeBody.current[0] };
    };

    const headHitsBody = () => {
        if (snakeBody.current.length > 3) {
            return snakeBody.current.some((bodyPart, index) => {
                if (index === 0) return false; // Skip head
                return snakeHead.current.x === bodyPart.x && snakeHead.current.y === bodyPart.y;
            });
        }
        return false;
    };

    const overTop = () => snakeHead.current.y < 0;
    const belowBottom = () => snakeHead.current.y >= canvasHeight;
    const outOfLeftBound = () => snakeHead.current.x < 0;
    const outOfRightBound = () => snakeHead.current.x >= canvasWidth;

    const loseConditions = () => {
        if (headHitsBody() || overTop() || belowBottom() || outOfLeftBound() || outOfRightBound()) {
            alert('Game Over');
            return true;
        }
        return false;
    };

    const resetScore = () => {
        if (score > highScore) {
            setHighScore(score);
        }
        setScore(0);
    };

    const resetDirection = () => {
        direction.current = '';
    };

    const resetGame = () => {
        if (loseConditions()) {
            resetScore();
            resetDirection();
            generateFood();
            generateSnake();
        }
    };

    const drawGame = () => {
        drawCanvas();
        move();
        resetGame();
    };

    const drawCanvas = () => {
        const context = canvasRef.current?.getContext('2d');
        if (!context) {
            return;
        }

        context.clearRect(0, 0, canvasWidth, canvasHeight);
        context.fillStyle = 'black';
        context.fillRect(0, 0, canvasWidth, canvasHeight);

        context.fillStyle = 'red';
        context.fillRect(food.current.x, food.current.y, blocksize, blocksize);

        snakeBody.current.forEach((block) => {
            context.fillStyle = 'green';
            context.fillRect(block.x, block.y, blocksize, blocksize);
        });
    };

    useEffect(() => {
        const interval = setInterval(drawGame, 100);
        return () => clearInterval(interval);
    }, []);

    useEffect(() => {
        window.addEventListener('keydown', calcMovement);
        return () => window.removeEventListener('keydown', calcMovement);
    }, []);

    return (
        <>
            <div className='body-container'>
                <div className='game-container'>
                    <div className='score'>
                        <span>Score: {score}</span>
                        <span>Highscore: {highScore}</span>
                    </div>
                    <canvas ref={canvasRef} width={canvasWidth} height={canvasHeight}></canvas>
                </div>
            </div>
        </>
    );
}